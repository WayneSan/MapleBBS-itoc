µo«H¤H: TKyo.bbs@cpu.tfcis.org (·t¶Â¶Q¤½¤l) ¬ÝªO: plan
¼Ð  ÃD: [§ó·s]PTT's pmore.c ¥\¯à patch for M3 more.c
µo«H¯¸: °Ê¤O®Ö¤ß (2005/11/26 Sat 10:02:28)                Updated: 2005/11/26

1.³Ð§@¥»¥\¯à«e, ¤w¸g¥ý¦æª¾·| PTT (§å½ð½ð¹ê·~§{) BBS ¯¸ªø in2
  ¨ÃÀò±o¥L¤¹³\ "³Ð·N³Ð§@" ¦Ó«á, ¦Û¦æ¨Ì·Ó¨ä¥\¯à­±·f°t­ì¥» more.c µ{¦¡½X³Ð§@
  ¥B¥¼°Ñ¦Ò pmore.c ¥ô¦óµ{¦¡½X

2.³Ð§@¥»¥\¯à«á, ¤]¤w¸gª¾·| PTT (§å½ð½ð¹ê·~§{) BBS pmore.c ­ì³ÐªÌ piaip
  ¨ÃÀò±o¥L¤¹³\, ±N patch ­ì©l½X¥æ¥Ñ itoc ¤½§G

3.¥»ª©¥» patch, ¥Ø«e©|¥¼¹ê§@

  ·í "¤@¦æ¦r¼Æ> 80 ¦æ" ®É, µe­±¦A¦¸¾ã²z°ÊºA²¾°Ê¤Î¯S§OÅã¥Ü (....[1;37m\[m or ....[1;37m>[m)

4.¥»ª©¥»¤w patch ¥\¯à

  a.Fill Memory patch ¥\¯à
  b.°ÊºA´¡¤Jµe­±¤À¹j½u patch ¥\¯à

5.¥\¯à­±Â²¤¶

  a.«öÁä :
                   [1;32mTab[m - ¦V¥kÂ½¾\¤@¦¸ 4 ¦C
         [1;32mShift+Tab[m/[1;32mZ[m/[1;32mz[m - ¦V¥ªÂ½¾\¤@¦¸ 4 ¦C
                   [1;32m.[m/[1;32m>[m - ¦V¥kÂ½¾\¤@¦¸ 1 ¦C (²Ä¤@¦¸²¾°Ê 2 ¦C)
                   [1;32m,[m/[1;32m<[m - ¦V¥ªÂ½¾\¤@¦¸ 1 ¦C

  b.²Ä¤@¦¸«ö [1;32m.[m ¦V¥kÂ½¾\®É, ¥Ñ©ó¦³ [1;37m<[m ´£¥Ü²Å¸¹ªºÃö«Y
    ¦pªG¥u²¾°Ê 1 ¦Cªº¸Ü, ·|Åý¨Ï¥ÎªÌ·PÄ±¤£¥X¨Óµe­±¦³¦b²¾°Ê, ¦]¦¹¤~²¾°Ê 2 ¦C

  c.PCMan/KKMan(©|¥¼¹êÅç) ¤£¤ä´© Shift+Tab «öÁä, ·|»~§P¬° Tab «öÁä
    ½Ð¥Î [1;32mz[m ©M [1;32mZ[m ´À¥N

6.©³¤Uµ{¦¡¦Cªí, ¬°¾\Åª¤è«K, ¬G¦³©ÒÂ_¦æ

------------------------------------------------------------------------------

:src/include/global.h

  #define KEY_TAB   9   /* ©M Ctrl('I') ¬Û¦P */
+ #define KEY_STAB  90  /* ©M Z ¬Û¦P */

  #define QUOTE_CHAR1   '>'
  #define QUOTE_CHAR2   ':'
+ #define QUOTE_CHAR3   '<'

/* ·sªO¥»¤w±N LINE_HEADER ·h²¾¦Ü global.h
   µ¹ more.c/bhttpd.c ¨Ï¥Î */

+ #define LINE_HEADER   3   /* ÀÉÀY¦³¤T¦æ */

:scr/include/theme.h

- #define FOOTER_MORE \
- COLOR1 " ÂsÄý P.%d (%d%%) " COLOR2 " (h)»¡©ú [PgUp][PgDn][0][$]²¾°Ê" \
- " (/n)·j´M (C)¼È¦s (¡öq)µ²§ô "

+ #define FOOTER_MORE \
+ COLOR1 " ÂsÄý P.%d (%d%%) " COLOR2 " (/n)·j´M (h)»¡©ú (¡ö/q)Â÷¶}%*s" \
+ "ùø¦C¡G%d - %d¢x¦æ¡G%d - %dùø "

:src/maple/more.c

  /* more_pool[more_base ~ more_base+more_size] ¦³­È */
  static int more_base;
  static int more_size;
+ static int more_offset;

  ...

  static uschar *fimage;    /* file image begin */
  static uschar *fend;      /* file image end */
  static uschar *foff;      /* ¥Ø«eÅª¨ì­þ¸Ì */
+ static uschar *flast;     /* last page start offset address*/

  ...

  #define END_MASK  0x200   /* «ö KEY_END ª½¹F³Ì«á¤@­¶ */
+ #define END_MORE_MASK 0x400   /* «ö KEY_END ª½¹F³Ì«á¤@­¶, ¤@°ï¨SÅª */

- #define HUNT_MASK 0x400
+ #define HUNT_MASK 0x800


:src/maple/more.c - outs_line()

- static void
+ static int                /* µ¹ hunt ¥Î */
  outs_line(str)            /* ¦L¥X¤@¯ë¤º®e */
    char *str;
  {
    int ch1, ch2, ansi;
+   int curr_offset, in_ansi, in_chi;
+   char *ptr, last_ansi_code[20];
+   char buf[ANSILINELEN];
+   off_t ret;

    ptr = str;

    ch1 = str[0];
    ch2 = str[1];
+   last_ansi_code[0] = '\0';

    if (ch2 == ' ' && (ch1 == QUOTE_CHAR1 || ch1 == QUOTE_CHAR2))   /* ¤Þ¨¥ */
    {
      ansi = 1;
      ch1 = str[2];
+     sprintf(last_ansi_code,
+       (ch1 == QUOTE_CHAR1 || ch1 == QUOTE_CHAR2) ? "\033[33m" : "\033[36m");
-     outs((ch1 == QUOTE_CHAR1 || ch1 == QUOTE_CHAR2) ?
-       "\033[33m" : "\033[36m");   /* ¤Þ¥Î¤@¼h/¤G¼h¤£¦PÃC¦â */
+     outs(last_ansi_code); /* ¤Þ¥Î¤@¼h/¤G¼h¤£¦PÃC¦â */
    }
    else if (ch1 == '\241' && ch2 == '\260')    /* ¡° ¤Þ¨¥ªÌ */
    {
      ansi = 1;
+     strcpy(last_ansi_code, "\033[1;36m");
-     outs("\033[1;36m");
+     outs(last_ansi_code);
    }
    else
      ansi = 0;

+ /* ­pºâ°¾²¾¤Î¨ú±o³Ì«á ANSI Code*/

+   if (more_offset)
+   {
+     prints("\033[1;37m%c\033[m", QUOTE_CHAR3);

+     curr_offset = in_ansi = in_chi = ch2 = 0;

+     while ((ch1 = *ptr))
+     {
+       if (ch1 == KEY_ESC)
+       {
+         if (str_ncmp(ptr, str_ransi, strlen(str_ransi)))
+         {
+           last_ansi_code[ch2++] = ch1;
+           ansi = in_ansi = 1;
+         }
+         else
+           ptr += strlen(str_ransi) - 1;
+       }
+       else if (in_ansi)
+       {
+         if (!strchr(STR_ANSICODE, ch1))
+           in_ansi = 0;

+         last_ansi_code[ch2++] = ch1;
+         last_ansi_code[ch2] = '\0';

+         if (!(in_ansi))
+         {
+           outs(last_ansi_code);
+           ch2 = 0;
+         }
+       }
+       else
+       {
+         if (more_offset == curr_offset)
+           break;

+         if (in_chi || ch1 & 0x80)
+           in_chi ^= 1;

+         curr_offset++;
+       }
+       ptr++;
+     }

+     if (in_chi)
+       ptr++;
+   }

+   ret = ptr - str;

    /* ¦L¥X¤º®e */

-   if (!hunt[0])
-   {
-     outx(str);
-   }
-   else
+   if (hunt[0])
    {
      int len;
-     char buf[ANSILINELEN];
      char *ptr1, *ptr2;

      len = strlen(hunt);
      ptr2 = buf;
      while (1)
      {
-       if (!(ptr1 = str_sub(str, hunt)))
+       if (!(ptr1 = str_sub(ptr, hunt)))
        {
          strcpy(ptr2, str);
          break;
        }

-       if (buf + ANSILINELEN - 1 <= ptr2 + (ptr1 - str) + (len + 7))
-       /* buf ªÅ¶¡¤£°÷ */
+       if (buf + ANSILINELEN - 1 <= ptr2 + (ptr1 - ptr) + (len + 7))
+       /* buf ªÅ¶¡¤£°÷ */
          break;

-       str_ncpy(ptr2, str, ptr1 - str + 1);
-       ptr2 += ptr1 - str;
+       str_ncpy(ptr2, ptr, ptr1 - ptr + 1);
+       ptr2 += ptr1 - ptr;
        sprintf(ptr2, "\033[7m%.*s\033[m", len, ptr1);
        ptr2 += len + 7;
-       str = ptr1 + len;
+       ptr = ptr1 + len;
      }

-     outx(buf);
+     ptr = buf;
    }

+   if (more_offset && in_chi)
+     outc(' ');

    if (ansi)
      outs(str_ransi);

+   return ret;
    }

/* ¾ã­Ó¨ç¦¡´«±¼, ³o¼Ë¬Ý°_¨Ó¤ñ¸ûÂ²«K */
:src/maple/more.c - outs_header()

static void
outs_header(buf, header_len)        /* ¦L¥XÀÉÀY */
  char *buf;
  int header_len;
{
  static char header1[LINE_HEADER][LEN_AUTHOR1] = {"§@ªÌ", "¼ÐÃD", "®É¶¡"};
  static char header2[LINE_HEADER][LEN_AUTHOR2] =
  {"µo«H¤H", "¼Ð  ÃD", "µo«H¯¸"};

  int i;
  char *ptr, *word;

  /* ³B²zÀÉÀY */

  for (i = 0; i < LINE_HEADER; i++)
  {
    if ((header_len == LEN_AUTHOR1 &&
      !memcmp(buf, header1[i], LEN_AUTHOR1 - 1)) ||
      (header_len == LEN_AUTHOR2 &&
      !memcmp(buf, header2[i], LEN_AUTHOR2 - 1)))
    {
      word = buf + header_len;

      /* §@ªÌ/¬ÝªO ÀÉÀY¦³¤GÄæ¡A¯S§O³B²z */
      if (i == 0 &&
        ((ptr = strstr(word, str_post1)) || (ptr = strstr(word, str_post2))))
      {
        ptr[-1] = ptr[4] = '\0';
        prints(COLOR5 " %s " COLOR6 "%-*.*s" COLOR5 " %s " COLOR6
          "%-13s\033[m", header1[0], d_cols + 53, d_cols + 53, word
          , ptr, ptr + 5, str_ransi);
      }
      else
      {
        /* ¨ä¥LÀÉÀY³£¥u¦³¤@Äæ */
        prints(COLOR5 " %s " COLOR6 "%-*.*s\033[m",
      header1[i], d_cols + 72, d_cols + 72, word, str_ransi);
      }

      return;
    }
  }

  /* ¦pªG¤£¬OÀÉÀY¡A´N·í¤@¯ë¤å¦r¦L¥X */
  outs_line(buf);
}

/* ¾ã­Ó¨ç¦¡´«±¼, §ó°Ê´T«×¤j */
:src/maple/more.c - outs_footer()

static void
outs_footer(buf, lino, fsize)
  char *buf;
  int lino;
  int fsize;
{
  int i;

  sprintf(buf, FOOTER_MORE, (lino - 2) / PAGE_SCROLL + 1,
    ((foff - fimage) * 100) / fsize, 0, "",
    (lino > PAGE_SCROLL) ? lino - PAGE_SCROLL : 1, lino, more_offset + 1,
    b_cols + more_offset);

  i = b_cols + strlen(COLOR1) + (strlen(COLOR2) * 4) + strlen(buf) - 1;

  sprintf(buf, FOOTER_MORE, (lino - 2) / PAGE_SCROLL + 1,
    ((foff - fimage) * 100) / fsize, i, "",
    (lino > PAGE_SCROLL) ? lino - PAGE_SCROLL : 1, lino, more_offset + 1,
    b_cols + more_offset);

  outz(buf);
  outs(str_ransi);
}

/* ·s¼W¤@¨ç¦¡ */

static uschar *
more_getoffset(shift, fsrc)         /* ¨ú±o¥¿½Tªº image offset */
  int shift;
  uschar *fsrc;
{
  uschar *ftmp;

  ftmp = fsrc;

  while (shift)
  {
    if (ftmp >= fend)
      break;

    if ((ftmp = strchr(ftmp, '\n')))
    {
      ftmp++;
      shift--;
    }
  }

  if (ftmp > fend)
    ftmp = fend;

  return ftmp;
}

/* ¾ã­Ó¨ç¦¡´«±¼, §ó°Ê´T«×¤j */
:src/maple/more.c - more()

int
more(fpath, footer)
  char *fpath;
  char *footer;
{
  char more_buf[ANSILINELEN];
  uschar *fnew;
  int i;

  int shift;            /* ÁÙ»Ý­n©¹¤U²¾°Ê´X¦C */
  int lino;             /* ¥Ø«e line number */
  int header_len;       /* ÀÉÀYªºªø«×¡A¦P®É¤]¬O¯¸¤º/¯¸¥~«Hªº°Ï§O */
  int key;              /* «öÁä */
  int cmd;              /* ¤¤Â_®É©Ò«öªºÁä */
  int fsize;            /* ÀÉ®×¤j¤p */
  int hunt_index;       /* ·j´M¯Á¤Þ */
  int curr_refresh;
  off_t block[MAXBLOCK];    /* ¨C 32 ¦C¬°¤@­Ó block¡A°O¿ý¦¹ block ªº offset */
  off_t header_end;         /* ÀÉÀYµ²§ô */
  off_t header_end2;        /* ÀÉÀY¤À¹j½u */

  if (!(fimage = f_img(fpath, &fsize)))
    return -1;

  foff = fimage;
  fend = foff + fsize;

  i = header_end = header_end2 = hunt_index = more_offset = curr_refresh = 0;
  while (more_line(more_buf))
  {
    if (*more_buf)       /* ¦³¤º®e´N¤@©w¬OÀÉÀY */
    {
      if (strstr(more_buf, ": "))
        header_end = foff - fimage;
      else
        break;
    }
    else            /* ²Ä¤@¦¸ "\n\n" ¬OÀÉÀYªºµ²§À */
    {
      if (i < LINE_HEADER)
        break;

      lino = strlen("\033[1;36m" MSG_SEPERATOR "\033[m\n");

      if (!(fnew = malloc(fsize + lino)))
      {
        free(fimage);
        return -1;
      }

      foff--;        /* ¦^¨ìÀÉÀY³Ì«á */

      shift = foff - fimage;
      memcpy(fnew, fimage, shift);
      memcpy(fnew + shift, "\033[1;36m" MSG_SEPERATOR "\033[m\n", lino);
      memcpy(fnew + shift + lino, foff, fsize - shift);
      header_end2 = shift + lino;

      free(fimage);
      fsize += lino;
      fimage = fnew;
      break;
    }
    if (++i > LINE_HEADER)  /* ²Ä¤@¦¸ "\n\n" ªº¦ì¸m¤£·|¶W¹L LINE_HEADER */
      break;
  }

resized:

  flast = foff = fimage;
  fend = foff + fsize;

  /* Åª¥XÀÉ®×²Ä¤@¦æ¡A¨Ó§PÂ_¯¸¤º«HÁÙ¬O¯¸¥~«H */
  if (fsize <= 0 || !more_line(more_buf))
  {
    free(fimage);
    return -1;
  }

  lino = key = cmd = 0;
  memset(&block, 0, sizeof(off_t) * MAXBLOCK);

#ifdef SLIDE_SHOW
  slideshow = 0;
#endif

  if (hunt[0])      /* ¦b xxxx_browse() ½Ð¨D·j´M¦r¦ê */
  {
    str_lowest(hunt, hunt);
    shift = HUNT_MASK | HUNT_START;
  }
  else
  {
    shift = b_lines;
  }

  header_len =
    !memcmp(&more_buf, str_author1, LEN_AUTHOR1) ? LEN_AUTHOR1 :
    /* ¡u§@ªÌ:¡vªí¯¸¤º¤å³¹ */
    !memcmp(&more_buf, str_author2, LEN_AUTHOR2) ? LEN_AUTHOR2 :
    /* ¡uµo«H¤H:¡vªíÂà«H¤å³¹ */
    0;                              /* ¨S¦³ÀÉÀY */

  /* Âk¹s */
  foff = fimage;
  clear();

  for(;;)
  {
    if (more_line(more_buf))
    {
      /* ------------------------------------------------- */
      /* ¦L¥X¤@¦Cªº¤å¦r                  */
      /* ------------------------------------------------- */

      /* ­º­¶«e´X¦C¤~»Ý­n³B²zÀÉÀY */
      if (foff <= fimage + header_end)
        outs_header(more_buf, header_len);
      else
      {
        if (foff <= fimage + header_end2)
          outx(more_buf);
        else
          hunt_index = outs_line(more_buf);
      }

      outc('\n');

      /* ------------------------------------------------- */
      /* ¨Ì shift ¨Ó¨M©w°Ê§@                 */
      /* ------------------------------------------------- */

      /* itoc.030303.µù¸Ñ: shift ¦b¦¹ªº·N¸q
         >0: ÁÙ»Ý­n©¹¤U²¾´X¦æ
         <0: ÁÙ»Ý­n©¹¤W²¾´X¦æ
         =0: µ²§ô³o­¶¡Aµ¥«Ý¨Ï¥ÎªÌ«öÁä */

      if (curr_refresh)
        shift--;
      else if (shift > 0)       /* ÁÙ­n¤U²¾ shift ¦C */
      {
        /* ¥u¦³¦b­è¶i more¡A²Ä¤@¦¸¦L²Ä¤@­¶®É¤~¥i¯à lino <= b_lines */
        if (lino >= b_lines)
          scroll();

        lino++;

        if ((lino % 32 == 0) && ((i = lino >> 5) < MAXBLOCK))
          block[i] = foff - fimage;

        if (shift & END_MASK)       /* «ö End Áä */
        {
          if (!(shift & END_MORE_MASK))
            flast = more_getoffset(1, flast);
        }
        else if (shift & HUNT_MASK)     /* ¦r¦ê·j´M */
        {
          if (shift & HUNT_NEXT)    /* «ö n ·j´M¤U¤@µ§ */
          {
            flast = more_getoffset(1, flast);
            /* ¤@§ä¨ì´N°±©ó¸Ó¦C */
            if (str_sub(&more_buf[hunt_index], hunt))
              shift = 0;
          }
          else          /* «ö / ¶}©l·j´M */
          {
            /* ­Y¦b²Ä¤G­¶¥H«á§ä¨ì¡A¤@§ä¨ì´N°±©ó¸Ó¦C¡F
               ­Y¦b²Ä¤@­¶§ä¨ì¡A¥²¶·µ¥¨ìÅª§¹²Ä¤@­¶¤~¯à°±¤î */
            if (shift & HUNT_START)
            {
              if (lino > b_lines)
                flast = more_getoffset(1, flast);

              /* ®³±¼ HUNT_START ¨Ã¥[¤W HUNT_FOUND */
              if (str_sub(&more_buf[hunt_index], hunt))
                shift ^= HUNT_START | HUNT_FOUND;
            }

            if (shift & HUNT_FOUND && lino >= b_lines)
              shift = 0;
          }

          hunt_index = 0;
        }
        else
        {
          if (lino > b_lines)
            flast = more_getoffset(1, flast);
          shift--;
        }
      }
      else if (shift < 0)       /* ÁÙ­n¤W²¾ -shift ¦C */
      {
        shift++;

        if (!(shift))
        {
          move(b_lines, 0);
          clrtoeol();

      /* ³Ñ¤U b_lines+shift ¦C¬O rscroll¡Aoffsect ¥h¥¿½T¦ì¸m¡F
         ³o¸Ìªº i ¬OÁ`¦@­n shift ªº¦C¼Æ */
        for (i += b_lines; i > 0; i--)
          more_line(more_buf);
        }
      }
    }

    if (foff >= fend)   /* ¤w¸gÅª§¹¥þ³¡ªºÀÉ®× */
    {
      /* ­Õ­Y¬O«ö End ²¾¨ì³Ì«á¤@­¶¡A¨º»ò°±¯d¦b 100% ¦Ó¤£µ²§ô¡F§_«h¤@«ßµ²§ô */
      //if (!(shift & END_MASK))
      //  break;
      if (!(footer))
        break;

      shift = 0;
    }

    if (shift)          /* ÁÙ»Ý­nÄ~ÄòÅª¸ê®Æ */
      continue;

    if (curr_refresh)
      curr_refresh = 0;

    /* ------------------------------------------------- */
    /* ¨ì¦¹¦L§¹©Ò»Ýªº shift ¦C¡A±µ¤U¨Ó¦L¥X footer ¨Ãµ¥«Ý */
    /* ¨Ï¥ÎªÌ«öÁä                    */
    /* ------------------------------------------------- */

re_key:

    outs_footer(more_buf, lino, fsize);

#ifdef SLIDE_SHOW
    key = more_slideshow();
#else
    key = vkey();
#endif

    if (screen_resized)
    {
      screen_resized = 0;
      goto resized;
    }

    if (key == ' ' || key == KEY_PGDN || key == KEY_RIGHT || key == Ctrl('F'))
    {
      if (foff >= fend)
      {
        cmd = 'j';
        break;
      }
      shift = PAGE_SCROLL;
    }

    else if (key == KEY_DOWN || key == '\n')
    {
      if (foff >= fend)
      {
        cmd = 'j';
        break;
      }
      shift = 1;
    }

    else if (key == KEY_PGUP || key == Ctrl('B') || key == KEY_DEL)
    {
      /* itoc.010324: ¨ì¤F³Ì¶}©l¦A¤W±²ªí¥ÜÂ÷¶}¡A¨Ã¦^¶Ç 'k'
         (keymap[] ©w¸q¤W¤@½g) */
      if (lino <= b_lines)
      {
        cmd = 'k';
        break;
      }
      /* ³Ì¦h¥u¯à¤W±²¨ì¤@¶}©l */
      i = PAGE_SCROLL + 1 - lino;
      shift = BMAX(-PAGE_SCROLL, i);
    }

    else if (key == KEY_UP)
    {
      /* itoc.010324: ¨ì¤F³Ì¶}©l¦A¤W±²ªí¥ÜÂ÷¶}¡A¨Ã¦^¶Ç 'k'
         (keymap[] ©w¸q¤W¤@½g) */
      if (lino <= b_lines)
      {
        cmd = 'k';
        break;
      }
      shift = -1;
    }

    else if (key == KEY_END || key == '$')
    {
      shift = END_MASK;
    }

    else if (key == KEY_HOME || key == '0')
    {
      if (lino <= b_lines)  /* ¤w¸g¦b³Ì¶}©l¤F */
        shift = 0;
      else
        shift = -b_lines;
    }

    else if (key == '/' || key == 'n')
    {
      /* ¦pªG«ö n «o¥¼¿é¤J¹L·j´M¦r¦ê¡A¨º»òµø¦P«ö / */
      if (key == 'n' && hunt[0])
      {
        shift = HUNT_MASK | HUNT_NEXT;
      }
      else
      {
        if (vget(b_lines, 0, "·j´M(ÃöÁä¦r)¡G", hunt, sizeof(hunt), DOECHO))
        {
          str_lowest(hunt, hunt);
          shift = HUNT_MASK | HUNT_START;
        }
        else                /* ¨ú®ø·j´M */
        {
          hunt[0] = '\0';
          foff = flast;
          curr_refresh = 1;
          shift = b_lines;
          clear();
          continue;
        }
      }
    }

    else if (key == 'C')    /* Thor.980405: more ®É¥i¦s¤J¼È¦sÀÉ */
    {
      FILE *fp;
      if (fp = tbf_open())
      {
        f_suck(fp, fpath);
        fclose(fp);
      }
      shift = 0;        /* ­«Ã¸ footer */
    }

    else if (key == KEY_TAB)
    {
      more_offset += TAB_STOP;

      if (more_offset >= ANSILINELEN)
        more_offset = ANSILINELEN;;

      foff = flast;
      curr_refresh = 1;
      shift = b_lines;
      clear();
      continue;
    }

    else if (key == KEY_STAB || key == 'z')
    {
      more_offset -= TAB_STOP;

      if (more_offset < 0)
        more_offset = 0;

      foff = flast;
      curr_refresh = 1;
      shift = b_lines;
      clear();
      continue;
    }

    else if (key == '>' || key == '.')
    {
      if (more_offset)
        more_offset++;
      else
        more_offset += 2;

      if (more_offset >= MORE_BUFSIZE)
        more_offset = MORE_BUFSIZE;

      foff = flast;
      curr_refresh = 1;
      shift = b_lines;
      clear();
      continue;
    }

    else if (key == '<' || key == ',')
    {
      if (more_offset)
      {
        more_offset--;
        foff = flast;
        curr_refresh = 1;
        shift = b_lines;
        clear();
        continue;
      }
    }

    else if (key == 'h')
    {
      screenline slt[T_LINES];

      vs_save(slt);
      xo_help("post");
      vs_restore(slt);
      shift = 0;
    }

    else        /* ¨ä¥LÁä³£¬O¨Ï¥ÎªÌ¤¤Â_ */
    {
      /* itoc.041006: ¨Ï¥ÎªÌ¤¤Â_ªº«öÁä­n > 0 (¦Ó KEY_LEFT ¬O < 0) */
      cmd = (key > 0) ? key : 'q';
      break;
    }

    /* ------------------------------------------------- */
    /* ¨Ï¥ÎªÌ¤w«öÁä¡A­Y break «hÂ÷¶}°j°é¡F§_«h¨Ì·Ó shift */
    /* ªººØÃþ (¥ç§Y«öÁäªººØÃþ) ¦Ó°µ¤£¦Pªº°Ê§@        */
    /* ------------------------------------------------- */

    if (shift > 0)          /* ·Ç³Æ¤U²¾ shift ¦C */
    {
      if (shift < (HUNT_MASK | HUNT_START)) /* ¤@¯ë¤U²¾ */
      {
        /* itoc.041114.µù¸Ñ:
           ¥Ø¼Ð¬O¨q¥X lino-b_lines+1+shift ~ lino+shift ¦Cªº¤º®e¡G
           ´N¥u­n²M footer §Y¥i¡A¨ä¥Lªº´N¥æµ¹«e­±´`§Ç¦L shift ¦Cªºµ{¦¡ */

        move(b_lines, 0);
        clrtoeol();

        /* itoc.041116:
           End ªº§@ªk¨ä¹ê©M¤@¯ë¤U²¾¥i¥H¬O§¹¥þ¤@¼Ëªº¡A¦ý¬O¦pªG¹J¨ì¶Wªø¤å³¹®É¡A
           ·|³y¦¨«e­±´`§Ç¦L shift ¦Cªºµ{¦¡´N±o¤@ª½Â½¡Aª½¨ì§ä¨ì³Ì«á¤@­¶¡A
           ³o¼Ë·|°µ¤Ó¦h outs_line() ¥Õ¤u¡A
           ©Ò¥H¦b¦¹¯S§OÀË¬d¶Wªø¤å³¹®É¡A´N¥ý¥h§ä³Ì«á¤@­¶©Ò¦b */

        /* ÁÙ¦³¤@°ï¨SÅª¹L¡A¤~¯S§O³B²z */
        if ((shift & END_MASK) && (fsize - (foff - fimage) >= MORE_BUFSIZE))
        {
          int totallino = lino;

          /* ¥ýÅª¨ì³Ì«á¤@¦C¬Ý¬Ý¥þ³¡¦³´X¦C */
          while (more_line(more_buf))
          {
            totallino++;
            if ((totallino % 32 == 0) && ((i = totallino >> 5) < MAXBLOCK))
              block[i] = foff - fimage;
          }

          /* ¥ý¦ì²¾¨ì¤W¤@­Ó block ªº§ÀºÝ */
          i = (totallino - b_lines) >> 5;
          if (i >= MAXBLOCK)
            i = MAXBLOCK - 1;

          flast = foff = fimage + block[i];
          i = i << 5;

          /* ¦A±q¤W¤@­Ó block ªº§ÀºÝ¦ì²¾¨ì totallino-b_lines+1 ¦C */
          for (i = totallino - b_lines - i; i > 0; i--)
            more_line(more_buf);

          flast = foff;
          lino = totallino - b_lines;
          shift |= END_MORE_MASK;
        }
      }
      else
      {
        /* '/' ±qÀY¶}©l·j´M */
        lino = 0;
        flast = foff = fimage;
        clear();
      }
    }
    else if (shift < 0)         /* ·Ç³Æ¤W²¾ -shift ¦C */
    {
      if (shift > -b_lines) /* ¤W±²¼Æ¦C */
      {
        lino += shift;

        /* itoc.041114.µù¸Ñ: ¥Ø¼Ð¬O¨q¥X lino-b_lines+1 ~ lino ¦Cªº¤º®e¡G
          1. ¥ý±qÀY¦ì²¾¨ì lino-b_lines+1 ¦C
          2. ¨ä¤¤¦³ b_lines+shift ¦C¬O¤£ÅÜªº¤º®e¡A¥Î rscroll ¹F¦¨
          3. ¦b«e­±ªº outs_line() ªº¦a¤è¦L¥X -shift ¦C
          4. ³Ì«á¦A¦ì²¾­è¤~ rscroll ªº¦C¼Æ
        */

        /* ¥ý¦ì²¾¨ì¤W¤@­Ó block ªº§ÀºÝ */
        i = (lino - b_lines) >> 5;
        if (i >= MAXBLOCK)
          i = MAXBLOCK - 1;
        foff = fimage + block[i];
        i = i << 5;

        /* ¦A±q¤W¤@­Ó block ªº§ÀºÝ¦ì²¾¨ì lino-b_lines+1 ¦C */
        for (i = lino - b_lines - i; i > 0; i--)
          more_line(more_buf);

        for (i = shift; i < 0; i++)
        {
          rscroll();
          move(0, 0);
          clrtoeol();
        }

        i = shift;
        flast = foff;
      }
      else          /* Home */
      {
        /* itoc.041226.µù¸Ñ: ¥Ø¼Ð¬O¨q¥X 1 ~ b_lines ¦Cªº¤º®e¡G
           §@ªk´N¬O¥þ³¡³£Âk¹s¡A±qÀY¦A¦L b_lines ¦C§Y¥i */

        clear();

        flast = foff = fimage;
        lino = 0;
        shift = b_lines;
      }
    }
    else                /* ­«Ã¸ footer ¨Ã re-key */
    {
      move(b_lines, 0);
      clrtoeol();
      goto re_key;
    }
  } /* °j°éªºµ²§ô */

  /* --------------------------------------------------- */
  /* ÀÉ®×¤w¸g¨q§¹ (cmd = 0) ©Î ¨Ï¥ÎªÌ¤¤Â_ (cmd != 0)     */
  /* --------------------------------------------------- */

  free(fimage);

  if (!cmd) /* ÀÉ®×¥¿±`¨q§¹¡A­n³B²z footer */
  {
    if (footer)     /* ¦³ footer */
    {
      if (footer != (char *) -1)
        outf(footer);
      else
        outs(str_ransi);
    }
    else        /* ¨S¦³ footer ­n vmsg() */
    {
      /* lkchu.981201: ¥ý²M¤@¦¸¥H§K­«Å|Åã¥Ü */
      move(b_lines, 0);
      clrtoeol();

      /* Thor.990204: ¯S§Oª`·N­Y¦^¶Ç 'C' ªí¥Ü¼È¦sÀÉ */
      if (vmsg(NULL) == 'C')
      {
        FILE *fp;

        if (fp = tbf_open())
        {
          f_suck(fp, fpath);
          fclose(fp);
        }
      }
    }
  }
  else      /* ¨Ï¥ÎªÌ¤¤Â_¡Aª½±µÂ÷¶} */
    outs(str_ransi);

  hunt[0] = '\0';

  /* Thor.990204: Åýkey¥i¦^¶Ç¦Ümore¥~ */
  return cmd;
}

--
[1;36m=[37m[[36m¡É[37m:[33m¡[37mÝ¢¨[m¢©¡[1;33mÝ[37m:[36m¡É [31mOrigin[37m ]|[[m  [0;31m°[1mÊ[1m¤[0;31mO[0;31m®[1mÖ[1m¤[0;31mß [1mcpu.tfcis.org  [37m]|[¡[33mÝ£»¡[mÝ[1;36m¡É[37m:][36m=[m
[1;36m=[0m[[1;36m¡Ç[37m:[33m¡[30mÝ¢ª[m¢¬¡[1;33mÝ[37m:[36m¡Ç [31mAuthor[m ]|[[1m     cszone.twbbs.org     [m]|[¡[1;33mÝ[30m¡[37m´¡[30mÝ[36m¡Ç[37m:[m][1;36m=[m
